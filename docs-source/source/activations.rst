Layer activations
=================

Once a model has been fully trained and evaluated, you may use the model to generate penultimate layer activations to gain better insight into the kinds of image features the model has learned.

Mosaic maps
***********

The easiest way to get started with layer activations is to calculate and display layer activations as a mosaic map. Mosaic maps are generated by calculating penultimate layer activations for a set of tiles, performing dimensionality reduction (UMAP) on the activations, and overlaying tile images onto the UMAP. The ``SlideflowProject`` class has a function which can supervise these steps automatically and save the final figure to the project directory:

.. code-block:: python

	SFP.generate_mosaic(model="/path/to/saved/model.h5",
		  filters={"dataset": ["evaluation"]})

.. autofunction:: slideflow.SlideflowProject.generate_mosaic
   :noindex:

.. image:: mosaic_example.png

Working with activations
************************

To work more directly with layer activations, use the :class:`slideflow.activations.ActivationsVisualizer` class. Instancing the class supervises the calculation and caching of layer activations, which can then be exported, viewed (as a mosaic map), or analyzed with various statistical methods. ``SlideflowProject.generate_activations_analytics()`` automatically creates and returns an instance of this class. 

.. code-block:: python

	AV = SFP.generate_activations_analytics(model='/path/to/trained_model.h5', 
						outcome_header="HPV")

The ``get_predictions()`` function will return a dictionary mapping slide names to outcome categories and list tile-level predictions. Predictions are ordered according to their position in their corresponding TFRecord. Corresponding tile images can be pulled from the TFRecords with :meth:`slideflow.io.tfrecords.get_tfrecord_by_index`.

.. code-block:: python

	AV.get_predictions()

Similarly, the ``get_activations()`` function will return a dictionary mapping slide names to layer nodes, listing tile-level activations for each node. 

.. code-block:: python

	AV.get_activations()

To view layer activations using dimensionality reduction (UMAP), color-coded according to outcome categories, use the ``plot_2D_umap()`` function:

.. code-block:: python

	AV.plot_2D_umap()

.. image:: 2d_umap.png

To compare activations of layer nodes across outcome categories and find nodes which differ significantly across categories, use the ``generate_box_plots()`` function:

.. code-block:: python

	AV.generate_box_plots()

.. image:: boxplot_example.png

To get a list of the layer nodes which differ most significantly across outcome categories (by ANOVA), use ``get_top_nodes_by_slide()``:

.. code-block:: python

	AV.get_top_nodes_by_slide()

To view a UMAP of layer activations with an added third dimension representing the activation of a single node, use the ``plot_3D_umap`` function:

.. code-block:: python

	AV.plot_3D_umap(node=497)

.. image:: 3d_umap.png